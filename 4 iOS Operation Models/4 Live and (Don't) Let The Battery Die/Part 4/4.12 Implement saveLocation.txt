4.12 Implement saveLocation


We've created a UIButton named saveButton in ProfileEditViewController.m that calls a method named saveLocation when tapped.

Implement saveLocation to save the self.locationField.text value in the user model, and call the popViewControllerAnimated: method to return to ProfileViewController.


ProfileEditViewController.h
#import <UIKit/UIKit.h>

@class User;

@interface ProfileEditViewController : UIViewController <UITextFieldDelegate>

@property (strong, nonatomic) User *user;
@property (strong, nonatomic) UITextField *locationField;

- (void)saveLocation;

@end


ProfileEditViewController.m
#import "ProfileEditViewController.h"
#import "User.h"

@implementation ProfileEditViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        self.title = @"Location Edit";
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.view.backgroundColor = [UIColor whiteColor];
    
    self.locationField = [[UITextField alloc] init];
    self.locationField.frame = CGRectMake(15, 50, 280, 40);
    self.locationField.borderStyle = UITextBorderStyleBezel;
    self.locationField.keyboardType = UIKeyboardTypeDefault;
    self.locationField.text = self.user.location;
    self.locationField.delegate = self;
    
    [self.view addSubview:self.locationField];

    UIButton *saveButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    saveButton.frame = CGRectMake(15, 100, 280, 50);
    [saveButton setTitle:@"Save Location" forState:UIControlStateNormal];
    [self.view addSubview:saveButton];
    [saveButton addTarget:self
                   action:@selector(saveLocation)
         forControlEvents:UIControlEventTouchUpInside];
}

/*//implement -(void)saveLocation {} here//*/

- (void)viewWillAppear:(BOOL)animated
{
    self.locationField.text = self.user.location;
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    self.user.location = textField.text;

    [textField resignFirstResponder];
    return YES;
}

@end


Answer:
ProfileEditViewController.m
#import "ProfileEditViewController.h"
#import "User.h"

@implementation ProfileEditViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        self.title = @"Location Edit";
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.view.backgroundColor = [UIColor whiteColor];
    
    self.locationField = [[UITextField alloc] init];
    self.locationField.frame = CGRectMake(15, 50, 280, 40);
    self.locationField.borderStyle = UITextBorderStyleBezel;
    self.locationField.keyboardType = UIKeyboardTypeDefault;
    self.locationField.text = self.user.location;
    self.locationField.delegate = self;
    
    [self.view addSubview:self.locationField];

    UIButton *saveButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    saveButton.frame = CGRectMake(15, 100, 280, 50);
    [saveButton setTitle:@"Save Location" forState:UIControlStateNormal];
    [self.view addSubview:saveButton];
    [saveButton addTarget:self
                   action:@selector(saveLocation)
         forControlEvents:UIControlEventTouchUpInside];
}

- (void)saveLocation
{  
  self.user.location = self.locationField.text;
  [self.navigationController popViewControllerAnimated:YES];
}

- (void)viewWillAppear:(BOOL)animated
{
    self.locationField.text = self.user.location;
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    self.user.location = textField.text;

    [textField resignFirstResponder];
    return YES;
}

@end