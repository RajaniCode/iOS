6.2 Setup the displayTable method


Even within one city there could still be a lot of restaurants, and we won't want to click through all of them just to find the one we want, so we've set up a RestaurantsTableViewController to display an easy-to-read list. We've also added a button to RestaurantMapViewController.m that calls a method named displayTable: when tapped.

In that method, set the tableVC.restaurants property equal to self.restaurants. Then, set tableVC's modal transition style to UIModalTransitionStyleCrossDissolve.


RestaurantsTableViewControlller.h
#import <UIKit/UIKit.h>
#import <MapKit/MapKit.h>

@interface RestaurantMapViewController : UIViewController <MKMapViewDelegate, UITextFieldDelegate>

@property (strong, nonatomic) MKMapView *theMap;
@property (strong, nonatomic) UIButton *userCenterButton;
@property (strong, nonatomic) UILabel *userLocationLabel;
@property (strong, nonatomic) NSArray *restaurants;

@property (strong, nonatomic) UITextField *citySearchField;

- (void)centerOnUser:(id)sender;
- (void)showRestaurants:(NSArray *)restaurants andCenter:(BOOL)shouldCenter;

- (void)displayTable:(id)sender;
@end       


RestaurantMapViewController.h
#import <UIKit/UIKit.h>
#import <MapKit/MapKit.h>

@interface RestaurantsTableViewController : UITableViewController

@property (strong, nonatomic) NSArray *restaurants;

- (void)goBack:(id)sender;

@end


RestaurantMapViewController.m
#import "RestaurantMapViewController.h"
#import "MapAnnotation.h"
#import "AFJSONRequestOperation.h"
#import "RestaurantsTableViewController.h"

@implementation RestaurantMapViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.theMap = [[MKMapView alloc] init];
    self.theMap.frame = CGRectMake(0, 0, 320, 300);
    self.theMap.delegate = self;
    self.theMap.scrollEnabled = YES;
    self.theMap.zoomEnabled = NO;
    [self.view addSubview:self.theMap];
    
    CLLocationCoordinate2D centerCoordinate = CLLocationCoordinate2DMake(28.41871, -81.58121);
    double regionWidth = 2500;
    double regionHeight = 2200;
    MKCoordinateRegion startRegion = MKCoordinateRegionMakeWithDistance(centerCoordinate, regionWidth, regionHeight);
    [self.theMap setRegion:startRegion
                  animated:YES];
    
    self.theMap.showsUserLocation = YES;
    
    self.userLocationLabel = [[UILabel alloc] init];
    self.userLocationLabel.frame = CGRectMake(20,360,280,40);
    self.userLocationLabel.backgroundColor = [UIColor clearColor];
    self.userLocationLabel.textAlignment = NSTextAlignmentCenter;
    self.userLocationLabel.font = [UIFont fontWithName:@"Helvetica" size:16.0f];
    self.userLocationLabel.text = @"lat: lng: ";
    [self.view addSubview:self.userLocationLabel];
    
    self.userCenterButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    self.userCenterButton.frame = CGRectMake(20,320,280,40);
    [self.userCenterButton setTitle:@"center on user"
                           forState:UIControlStateNormal];
    [self.userCenterButton addTarget:self
                              action:@selector(centerOnUser:)
                    forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:self.userCenterButton];
    
    self.citySearchField = [[UITextField alloc] init];
    self.citySearchField.frame = CGRectMake(20,20,280,40);
    self.citySearchField.delegate = self;
    self.citySearchField.backgroundColor = [UIColor whiteColor];
    self.citySearchField.keyboardType = UIKeyboardTypeNamePhonePad;
    self.citySearchField.borderStyle = UITextBorderStyleLine;
    self.citySearchField.font = [UIFont fontWithName:@"Helvetica" size:15.0f];
    self.citySearchField.placeholder = @"Enter Orlando, Tampa, or Jacksonville";
    [self.view addSubview:self.citySearchField];
    
    UIButton *displayTableButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    displayTableButton.frame = CGRectMake(20,400,280,40);
    [displayTableButton setTitle:@"display table"
                        forState:UIControlStateNormal];
    [displayTableButton addTarget:self
                           action:@selector(displayTable:)
                 forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:displayTableButton];
}

- (void)displayTable:(id)sender
{
    RestaurantsTableViewController *tableVC = [[RestaurantsTableViewController alloc] initWithStyle:UITableViewStyleGrouped];
    
    /*//set tableVC.restaurants equal to the restaurants object in self//*/

    /*//set the modalTransitionStyle to UIModalTransitionTypeCrossDissolve//*/
    
    [self presentViewController:tableVC animated:YES completion:nil];
}

- (void)centerOnUser:(id)sender
{
    if(self.theMap.userLocation.location == nil) {
        self.userLocationLabel.text = @"Can't get location";
    } else {
        [self.theMap setCenterCoordinate:self.theMap.userLocation.location.coordinate];
        
        CLGeocoder *geocoder = [[CLGeocoder alloc] init];
        [geocoder reverseGeocodeLocation:self.theMap.userLocation.location completionHandler:^(NSArray *placemarks, NSError *error) {
            CLPlacemark *placemark = placemarks[0];
            
            NSString *urlString = [NSString stringWithFormat:@"http://operationmapkit.codeschool.com/%@/",placemark.locality];
            
            NSURL *url = [NSURL URLWithString:urlString];
            NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url];
            AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request
                success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
                    self.restaurants = JSON;
                    [self showRestaurantsAndCenter:YES];
                } failure:^(NSURLRequest *request, NSHTTPURLResponse *response,
                            NSError *error, id JSON) {
                    NSLog(@"NSError: %@",error.localizedDescription);
                }];
            [operation start];
        }];
    }
    
}

- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation
{
    if(self.userLocationUpdated == NO) {
        [self centerOnUser:nil];
        self.userLocationUpdated = YES;
    }
    
    self.userLocationLabel.text = [NSString stringWithFormat:@"user location: %f, %f", userLocation.location.coordinate.latitude, userLocation.location.coordinate.longitude];
}

- (void)mapView:(MKMapView *)mapView didSelectAnnotationView:(MKAnnotationView *)view
{
    [self.theMap setCenterCoordinate:[[view annotation] coordinate]];
}

- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id<MKAnnotation>)annotation
{
    if([annotation isKindOfClass:[MKUserLocation class]]) {
        return nil;
    }
    
    MKAnnotationView *view = [self.theMap dequeueReusableAnnotationViewWithIdentifier:@"annoView"];
    if(!view) {
        view = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"annoView"];
    }
    
    MapAnnotation *singleAnnotation = annotation;
    
    if([singleAnnotation.cost isEqualToString:@"cheap"]) {
        view.image = [UIImage imageNamed:@"cheap.png"];
    } else if([singleAnnotation.cost isEqualToString:@"expensive"]) {
        view.image = [UIImage imageNamed:@"expensive.png"];
    }
    
    view.canShowCallout = YES;
    
    return view;
}

- (void)showRestaurantsAndCenter:(BOOL)shouldCenter
{
    for(NSDictionary *restaurant in self.restaurants) {
        CLLocationCoordinate2D annotationCoordinate = CLLocationCoordinate2DMake([restaurant[@"lat"] doubleValue], [restaurant[@"lng"] doubleValue]);
        
        MapAnnotation *annotation = [[MapAnnotation alloc] init];
        annotation.coordinate = annotationCoordinate;
        annotation.title = restaurant[@"name"];
        annotation.subtitle = restaurant[@"contact"];
        annotation.cost = restaurant[@"cost"];
        
        [self.theMap addAnnotation:annotation];
    }
    
    if(shouldCenter) {
        NSMutableArray *lats = [[NSMutableArray alloc] init];
        NSMutableArray *lngs = [[NSMutableArray alloc] init];
        
        for(NSDictionary *restaurant in self.restaurants) {
            [lats addObject:[NSNumber numberWithDouble:[restaurant[@"lat"] doubleValue]]];
            [lngs addObject:[NSNumber numberWithDouble:[restaurant[@"lng"] doubleValue]]];
        }
        
        [lats sortUsingSelector:@selector(compare:)];
        [lngs sortUsingSelector:@selector(compare:)];
        
        double smallestLat = [lats[0] doubleValue];
        double smallestLng = [lngs[0] doubleValue];
        double biggestLat  = [[lats lastObject] doubleValue];
        double biggestLng  = [[lngs lastObject] doubleValue];
        
        CLLocationCoordinate2D annotationsCenter = CLLocationCoordinate2DMake((biggestLat + smallestLat) / 2, (biggestLng + smallestLng) / 2);
        
        MKCoordinateSpan annotationsSpan = MKCoordinateSpanMake((biggestLat - smallestLat), (biggestLng - smallestLng));
        
        MKCoordinateRegion region = MKCoordinateRegionMake(annotationsCenter, annotationsSpan);
        
        [self.theMap setRegion:region];
    }
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    
    NSString *urlString = [NSString stringWithFormat:@"http://operationmapkit.codeschool.com/%@/",textField.text];
    
    NSURL *url = [NSURL URLWithString:urlString];
    NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url];
    AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request
        success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
            self.restaurants = JSON;
            [self showRestaurantsAndCenter:YES];
        } failure:^(NSURLRequest *request, NSHTTPURLResponse *response,
                    NSError *error, id JSON) {
            NSLog(@"NSError: %@",error.localizedDescription);
        }];
    [operation start];
    
    return YES;
}

- (void)dealloc
{
    self.theMap = nil;
}

@end


Answer:
RestaurantMapViewController.m
#import "RestaurantMapViewController.h"
#import "MapAnnotation.h"
#import "AFJSONRequestOperation.h"
#import "RestaurantsTableViewController.h"

@implementation RestaurantMapViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.theMap = [[MKMapView alloc] init];
    self.theMap.frame = CGRectMake(0, 0, 320, 300);
    self.theMap.delegate = self;
    self.theMap.scrollEnabled = YES;
    self.theMap.zoomEnabled = NO;
    [self.view addSubview:self.theMap];
    
    CLLocationCoordinate2D centerCoordinate = CLLocationCoordinate2DMake(28.41871, -81.58121);
    double regionWidth = 2500;
    double regionHeight = 2200;
    MKCoordinateRegion startRegion = MKCoordinateRegionMakeWithDistance(centerCoordinate, regionWidth, regionHeight);
    [self.theMap setRegion:startRegion
                  animated:YES];
    
    self.theMap.showsUserLocation = YES;
    
    self.userLocationLabel = [[UILabel alloc] init];
    self.userLocationLabel.frame = CGRectMake(20,360,280,40);
    self.userLocationLabel.backgroundColor = [UIColor clearColor];
    self.userLocationLabel.textAlignment = NSTextAlignmentCenter;
    self.userLocationLabel.font = [UIFont fontWithName:@"Helvetica" size:16.0f];
    self.userLocationLabel.text = @"lat: lng: ";
    [self.view addSubview:self.userLocationLabel];
    
    self.userCenterButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    self.userCenterButton.frame = CGRectMake(20,320,280,40);
    [self.userCenterButton setTitle:@"center on user"
                           forState:UIControlStateNormal];
    [self.userCenterButton addTarget:self
                              action:@selector(centerOnUser:)
                    forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:self.userCenterButton];
    
    self.citySearchField = [[UITextField alloc] init];
    self.citySearchField.frame = CGRectMake(20,20,280,40);
    self.citySearchField.delegate = self;
    self.citySearchField.backgroundColor = [UIColor whiteColor];
    self.citySearchField.keyboardType = UIKeyboardTypeNamePhonePad;
    self.citySearchField.borderStyle = UITextBorderStyleLine;
    self.citySearchField.font = [UIFont fontWithName:@"Helvetica" size:15.0f];
    self.citySearchField.placeholder = @"Enter Orlando, Tampa, or Jacksonville";
    [self.view addSubview:self.citySearchField];
    
    UIButton *displayTableButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    displayTableButton.frame = CGRectMake(20,400,280,40);
    [displayTableButton setTitle:@"display table"
                        forState:UIControlStateNormal];
    [displayTableButton addTarget:self
                           action:@selector(displayTable:)
                 forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:displayTableButton];
}

- (void)displayTable:(id)sender
{
    RestaurantsTableViewController *tableVC = [[RestaurantsTableViewController alloc] initWithStyle:UITableViewStyleGrouped];
    
    tableVC.restaurants = self.restaurants;

    [tableVC setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
    
    [self presentViewController:tableVC animated:YES completion:nil];
}

- (void)centerOnUser:(id)sender
{
    if(self.theMap.userLocation.location == nil) {
        self.userLocationLabel.text = @"Can't get location";
    } else {
        [self.theMap setCenterCoordinate:self.theMap.userLocation.location.coordinate];
        
        CLGeocoder *geocoder = [[CLGeocoder alloc] init];
        [geocoder reverseGeocodeLocation:self.theMap.userLocation.location completionHandler:^(NSArray *placemarks, NSError *error) {
            CLPlacemark *placemark = placemarks[0];
            
            NSString *urlString = [NSString stringWithFormat:@"http://operationmapkit.codeschool.com/%@/",placemark.locality];
            
            NSURL *url = [NSURL URLWithString:urlString];
            NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url];
            AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request
                success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
                    self.restaurants = JSON;
                    [self showRestaurantsAndCenter:YES];
                } failure:^(NSURLRequest *request, NSHTTPURLResponse *response,
                            NSError *error, id JSON) {
                    NSLog(@"NSError: %@",error.localizedDescription);
                }];
            [operation start];
        }];
    }
    
}

- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation
{
    if(self.userLocationUpdated == NO) {
        [self centerOnUser:nil];
        self.userLocationUpdated = YES;
    }
    
    self.userLocationLabel.text = [NSString stringWithFormat:@"user location: %f, %f", userLocation.location.coordinate.latitude, userLocation.location.coordinate.longitude];
}

- (void)mapView:(MKMapView *)mapView didSelectAnnotationView:(MKAnnotationView *)view
{
    [self.theMap setCenterCoordinate:[[view annotation] coordinate]];
}

- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id<MKAnnotation>)annotation
{
    if([annotation isKindOfClass:[MKUserLocation class]]) {
        return nil;
    }
    
    MKAnnotationView *view = [self.theMap dequeueReusableAnnotationViewWithIdentifier:@"annoView"];
    if(!view) {
        view = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"annoView"];
    }
    
    MapAnnotation *singleAnnotation = annotation;
    
    if([singleAnnotation.cost isEqualToString:@"cheap"]) {
        view.image = [UIImage imageNamed:@"cheap.png"];
    } else if([singleAnnotation.cost isEqualToString:@"expensive"]) {
        view.image = [UIImage imageNamed:@"expensive.png"];
    }
    
    view.canShowCallout = YES;
    
    return view;
}

- (void)showRestaurantsAndCenter:(BOOL)shouldCenter
{
    for(NSDictionary *restaurant in self.restaurants) {
        CLLocationCoordinate2D annotationCoordinate = CLLocationCoordinate2DMake([restaurant[@"lat"] doubleValue], [restaurant[@"lng"] doubleValue]);
        
        MapAnnotation *annotation = [[MapAnnotation alloc] init];
        annotation.coordinate = annotationCoordinate;
        annotation.title = restaurant[@"name"];
        annotation.subtitle = restaurant[@"contact"];
        annotation.cost = restaurant[@"cost"];
        
        [self.theMap addAnnotation:annotation];
    }
    
    if(shouldCenter) {
        NSMutableArray *lats = [[NSMutableArray alloc] init];
        NSMutableArray *lngs = [[NSMutableArray alloc] init];
        
        for(NSDictionary *restaurant in self.restaurants) {
            [lats addObject:[NSNumber numberWithDouble:[restaurant[@"lat"] doubleValue]]];
            [lngs addObject:[NSNumber numberWithDouble:[restaurant[@"lng"] doubleValue]]];
        }
        
        [lats sortUsingSelector:@selector(compare:)];
        [lngs sortUsingSelector:@selector(compare:)];
        
        double smallestLat = [lats[0] doubleValue];
        double smallestLng = [lngs[0] doubleValue];
        double biggestLat  = [[lats lastObject] doubleValue];
        double biggestLng  = [[lngs lastObject] doubleValue];
        
        CLLocationCoordinate2D annotationsCenter = CLLocationCoordinate2DMake((biggestLat + smallestLat) / 2, (biggestLng + smallestLng) / 2);
        
        MKCoordinateSpan annotationsSpan = MKCoordinateSpanMake((biggestLat - smallestLat), (biggestLng - smallestLng));
        
        MKCoordinateRegion region = MKCoordinateRegionMake(annotationsCenter, annotationsSpan);
        
        [self.theMap setRegion:region];
    }
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    
    NSString *urlString = [NSString stringWithFormat:@"http://operationmapkit.codeschool.com/%@/",textField.text];
    
    NSURL *url = [NSURL URLWithString:urlString];
    NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url];
    AFJSONRequestOperation *operation = [AFJSONRequestOperation JSONRequestOperationWithRequest:request
        success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
            self.restaurants = JSON;
            [self showRestaurantsAndCenter:YES];
        } failure:^(NSURLRequest *request, NSHTTPURLResponse *response,
                    NSError *error, id JSON) {
            NSLog(@"NSError: %@",error.localizedDescription);
        }];
    [operation start];
    
    return YES;
}

- (void)dealloc
{
    self.theMap = nil;
}

@end